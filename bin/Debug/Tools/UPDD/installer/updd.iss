; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "UPDD"
;#define MyAppVersion "06.00.147"
#define MyAppPublisher "Touch-base Ltd"
#define MyAppURL "http://www.touch-base.com/"
;#define BASE_NAME="setup_000"
;#define VERSION_NAME="06.00.000"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{DEA7DFB8-A6EB-456B-AFB2-B75705991B87}
AppName={#MyAppName} {#VERSION_NAME}
AppVersion=v{#VERSION_NAME}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
DisableProgramGroupPage=yes
OutputBaseFilename={#BASE_NAME}
SetupIconFile={#UPDD_SLOT}\packages\expanded\installer\updd.ico
UninstallDisplayIcon="{app}\updd calibrate.exe"
Compression=lzma
SolidCompression=yes
LanguageDetectionMethod=uilanguage
ShowLanguageDialog=auto
CloseApplications=no
PrivilegesRequired=admin
DirExistsWarning=no

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"
Name: "brazilianportuguese"; MessagesFile: "compiler:Languages\BrazilianPortuguese.isl"
Name: "catalan"; MessagesFile: "compiler:Languages\Catalan.isl"
Name: "corsican"; MessagesFile: "compiler:Languages\Corsican.isl"
Name: "czech"; MessagesFile: "compiler:Languages\Czech.isl"
Name: "danish"; MessagesFile: "compiler:Languages\Danish.isl"
Name: "dutch"; MessagesFile: "compiler:Languages\Dutch.isl"
Name: "finnish"; MessagesFile: "compiler:Languages\Finnish.isl"
Name: "french"; MessagesFile: "compiler:Languages\French.isl"
Name: "german"; MessagesFile: "compiler:Languages\German.isl"
Name: "greek"; MessagesFile: "compiler:Languages\Greek.isl"
Name: "hebrew"; MessagesFile: "compiler:Languages\Hebrew.isl"
Name: "hungarian"; MessagesFile: "compiler:Languages\Hungarian.isl"
Name: "italian"; MessagesFile: "compiler:Languages\Italian.isl"
Name: "japanese"; MessagesFile: "compiler:Languages\Japanese.isl"
Name: "norwegian"; MessagesFile: "compiler:Languages\Norwegian.isl"
Name: "polish"; MessagesFile: "compiler:Languages\Polish.isl"
Name: "portuguese"; MessagesFile: "compiler:Languages\Portuguese.isl"
Name: "russian"; MessagesFile: "compiler:Languages\Russian.isl"
Name: "scottishgaelic"; MessagesFile: "compiler:Languages\ScottishGaelic.isl"
Name: "serbiancyrillic"; MessagesFile: "compiler:Languages\SerbianCyrillic.isl"
Name: "serbianlatin"; MessagesFile: "compiler:Languages\SerbianLatin.isl"
Name: "slovenian"; MessagesFile: "compiler:Languages\Slovenian.isl"
Name: "spanish"; MessagesFile: "compiler:Languages\Spanish.isl"
Name: "turkish"; MessagesFile: "compiler:Languages\Turkish.isl"
Name: "ukrainian"; MessagesFile: "compiler:Languages\Ukrainian.isl"
;Name: "sc"; MessagesFile: "compiler:Languages\ChineseSimplified.isl"

     
[Files]
Source: "d:\config\v6\msvc120\*"; DestDir: "{app}"; Flags: recursesubdirs createallsubdirs  onlyifdoesntexist
Source: "d:\config\v6\msvc140\*"; DestDir: "{app}"; Flags: recursesubdirs createallsubdirs  onlyifdoesntexist
Source: "d:\config\v6\msvc140\*"; DestDir: "{app}\preinstall_temp"; Flags: deleteafterinstall
; we have to install the full CRT for Windows 7 as this provides a compatibility wrapper for W10 sdk 
Source: "d:\config\v6\redist\vcredist_x86.exe"; DestDir: {tmp}; Flags: deleteafterinstall; AfterInstall: RunVCRedist
Source: "d:\config\v6\redist\vcredist_x64.exe"; DestDir: {tmp}; Flags: deleteafterinstall; AfterInstall: RunVCRedist
Source: "d:\config\v6\root_certs\CertumCA.cer"; DestDir: {tmp}; Flags: deleteafterinstall 
Source: "d:\config\v6\root_certs\VeriSignCA.cer"; DestDir: {tmp}; Flags: deleteafterinstall

Source: "{#UPDD_SLOT}\packages\expanded\bootstrap\*"; DestDir: "{app}\bootstrap"; Flags: ignoreversion recursesubdirs createallsubdirs   
Source: "{#UPDD_SLOT}\packages\expanded\qt\*"; DestDir: "{app}\preinstall_temp"; Flags: ignoreversion recursesubdirs createallsubdirs deleteafterinstall
Source: "{#UPDD_SLOT}\packages\expanded\appdir\preinstall.EXE"; DestDir: "{app}\preinstall_temp"; Flags: ignoreversion deleteafterinstall  



Source: "d:\config\v6\placeholder.txt"; DestDir: "{app}\placeholder.txt"; Flags: ignoreversion deleteafterinstall; BeforeInstall: RunRemoveDB
Source: "{#UPDD_SLOT}\packages\expanded\qt\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs  
Source: "{#UPDD_SLOT}\packages\expanded\appdir\preinstall.EXE"; DestDir: "{app}"; Flags: ignoreversion;  AfterInstall: RunPreinstall

Source: "{#UPDD_SLOT}\packages\expanded\api\*"; DestDir: "{app}\api"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#UPDD_SLOT}\packages\expanded\appdir\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#UPDD_SLOT}\packages\expanded\appdir64\*"; DestDir: "{app}\x64"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#UPDD_SLOT}\packages\expanded\bootstrap\*"; DestDir: "{app}\bootstrap"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#UPDD_SLOT}\packages\expanded\installer\*"; DestDir: "{app}\installer"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#UPDD_SLOT}\packages\expanded\inf\*"; DestDir: "{app}\inf\libusb"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#UPDD_SLOT}\packages\expanded\inf_upddusb\*"; DestDir: "{app}\inf\upddusb"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#UPDD_SLOT}\packages\expanded\inf_upddhid\*"; DestDir: "{app}\inf\upddhid"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "d:\config\v6\legacy\x86\upddsie*"; DestDir: "{app}\inf\upddmouse\x86\w7"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "d:\config\v6\legacy\x64\upd6sie*"; DestDir: "{app}\inf\upddmouse\x64\w7"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "d:\config\v6\legacy\x64\upddhid*"; DestDir: "{app}\inf\upddvh_v6\x64\w7"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "d:\config\v6\legacy\x64\*.dll"; DestDir: "{app}\inf\upddvh_v6\x64\w7"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "d:\config\v6\legacy\x86\upddhid*"; DestDir: "{app}\inf\upddvh_v6\x86\w7"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "d:\config\v6\legacy\x86\*.dll"; DestDir: "{app}\inf\upddvh_v6\x86\w7"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "d:\config\v6\upddhk\*"; DestDir: "{app}\inf\upddhk"; Flags: ignoreversion recursesubdirs createallsubdirs
                                                    
Source: "d:\config\v6\ms_attested\upddvh\2020_09_23\*"; DestDir: "{app}\inf\upddvh_v6\"; Flags: ignoreversion recursesubdirs createallsubdirs
;;64 bit only, has changes for nonpagedpoolnx
;;created for testing @ General Dynamics
;;no need to update 32 bit as yet
;Source: "d:\config\v6\ms_attested\upddvh\2019_05_20\x86\*"; DestDir: "{app}\inf\upddvh_v6\x86\"; Flags: ignoreversion recursesubdirs createallsubdirs
;Source: "d:\config\v6\ms_attested\upddvh\2019_06_13\x64\*"; DestDir: "{app}\inf\upddvh_v6\x64\"; Flags: ignoreversion recursesubdirs createallsubdirs

Source: "d:\config\v6\ms_attested\tbupddsu\2019_06_18\*"; DestDir: "{app}\inf\upddmouse\"; Flags: ignoreversion recursesubdirs createallsubdirs
;Source: "{#UPDD_SLOT}\packages\expanded\inf\tbupddsu\*"; DestDir: "{app}\inf\tbupddsu_v6\"; Flags: ignoreversion recursesubdirs createallsubdirs

Source: "{#UPDD_SLOT}\packages\expanded\installer\updd.ico"; DestDir: "{win}\inf"; Flags: ignoreversion recursesubdirs createallsubdirs

; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Run]
;Filename: "{tmp}\vcredist_x86.exe"; Parameters: "/passive /quiet /norestart";  Check: VCRedistNeedsInstall
Filename: "{sys}\certutil.EXE"; Parameters: "-addstore Root VeriSignCA.cer";  WorkingDir: "{tmp}"; Flags: runhidden    runascurrentuser
Filename: "{sys}\certutil.EXE"; Parameters: "-addstore Root CertumCA.cer";  WorkingDir: "{tmp}"; Flags: runhidden    runascurrentuser

Filename: "{app}\preinstall.EXE"; Parameters: "-autotrust";  WorkingDir: "{app}"; Flags: runhidden    runascurrentuser
Filename: "{app}\preinstall.EXE"; Parameters: "-upddbootstrap";  WorkingDir: "{app}"; Flags: runhidden    runascurrentuser
Filename: "{app}\preinstall.EXE"; Parameters: "-upddbootstrapuser";  WorkingDir: "{app}"; Flags: runhidden   runasoriginaluser
Filename: "{app}\updd.EXE"; Parameters: "-i";  WorkingDir: "{app}"; Flags: runhidden
Filename: "{sys}\sc.exe"; Parameters: "config updd binPath=""\""{app}\updd.exe\"""" ";  WorkingDir: "{tmp}"; Flags: runhidden
Filename: "{app}\updd.EXE"; Parameters: "-start";  WorkingDir: "{app}"; Flags: runhidden
Filename: "{app}\upddutils.EXE"; Parameters: "wait4install";  WorkingDir: "{app}"; Flags: runhidden   runasoriginaluser
Filename: "{app}\UPDD Daemon.exe"; WorkingDir: "{app}"; Flags: nowait  runasoriginaluser

[UninstallRun]
Filename: "{app}\preinstall.EXE"; Parameters: "-unload";  WorkingDir: "{app}"; Flags: runhidden
Filename: "{sys}\taskkill.exe"; Parameters: "/f /im ""updd daemon.exe""";  WorkingDir: "{sys}"; Flags: runhidden
Filename: "{sys}\taskkill.exe"; Parameters: "/f /im ""updd console.exe""";  WorkingDir: "{sys}"; Flags: runhidden
Filename: "{sys}\taskkill.exe"; Parameters: "/f /im ""updd test.exe""";  WorkingDir: "{sys}"; Flags: runhidden
Filename: "{sys}\taskkill.exe"; Parameters: "/f /im ""upddutils.exe""";  WorkingDir: "{sys}"; Flags: runhidden
Filename: "{sys}\taskkill.exe"; Parameters: "/f /im ""updd-gestures.exe""";  WorkingDir: "{sys}"; Flags: runhidden
Filename: "{sys}\taskkill.exe"; Parameters: "/f /im ""updd commander.exe""";  WorkingDir: "{sys}"; Flags: runhidden
Filename: "{sys}\taskkill.exe"; Parameters: "/f /im ""updd-tuio.exe""";  WorkingDir: "{sys}"; Flags: runhidden
Filename: "{sys}\taskkill.exe"; Parameters: "/f /im ""updd install.exe""";  WorkingDir: "{sys}"; Flags: runhidden
Filename: "{sys}\taskkill.exe"; Parameters: "/f /im ""updd annotate.exe""";  WorkingDir: "{sys}"; Flags: runhidden
Filename: "{sys}\sc.exe"; Parameters: "delete updd";  WorkingDir: "{sys}"; Flags: runhidden
Filename: "{sys}\sc.exe"; Parameters: "stop updd";  WorkingDir: "{sys}"; Flags: runhidden
Filename: "{sys}\taskkill.exe"; Parameters: "/f /im ""updd.exe""";  WorkingDir: "{sys}"; Flags: runhidden


Filename: "{sys}\taskkill.exe"; Parameters: "/f /im updd.exe";  WorkingDir: "{sys}"; Flags: runhidden
Filename: "{app}\updd.exe"; Parameters: "-stop";  WorkingDir: "{app}"; Flags: runhidden
Filename: "{app}\updd.exe"; Parameters: "-u";  WorkingDir: "{app}"; Flags: runhidden

Filename: "{app}\preinstall.EXE"; Parameters: "-removedb";  WorkingDir: "{app}"; Flags: runhidden
Filename: "{app}\preinstall.EXE"; Parameters: "-uninstall";  WorkingDir: "{app}"; Flags: runhidden

[UninstallDelete]
Type: filesandordirs; Name: "{commonappdata}\updd"
Type: filesandordirs; Name: "{app}\dumps"; 
Type: filesandordirs; Name: "{app}\inf"; 
Type: filesandordirs; Name: "c:\program files (x86)\updd\dumps"; 
Type: dirifempty; Name: {app}; 


[Code]
function VCRedistNeedsInstall: Boolean; FORWARD;

procedure RunVCRedist;
var
  ResultCode: Integer;
begin
;  if  VCRedistNeedsInstall()  then
;   begin
  Exec(ExpandConstant('{tmp}\vcredist_x86.exe'), '/passive /quiet /norestart', ExpandConstant('{tmp}'), SW_HIDE,    ewWaitUntilTerminated, ResultCode)
  Exec(ExpandConstant('{tmp}\vcredist_x64.exe'), '/passive /quiet /norestart', ExpandConstant('{tmp}'), SW_HIDE,    ewWaitUntilTerminated, ResultCode)
 ;  end;       

end;

function CmdLineParamExists(const Value: string): Boolean;
var
  I: Integer;  
begin
  Result := False;
  for I := 1 to ParamCount do
    if CompareText(ParamStr(I), Value) = 0 then
    begin
      Result := True;
      Exit;
    end;
end;

function InitializeSetup(): Boolean;
var  
  ResultCode: Integer;
begin
   result := true;
   if (FileExists(ExpandConstant('{pf32}\updd\upddutils.exe'))) then
   begin

     if Exec(ExpandConstant('{pf32}\updd\upddutils.exe'), 'check_maintenance',ExpandConstant('{pf32}\updd'),
             SW_HIDE,ewWaitUntilTerminated,ResultCode) then
     begin
       // Program Ran successfully ResultCode now contains exit code results
       // if Exit was -2 then Cancel Installation.
       if ResultCode = -2 then
       begin
          MsgBox('Your UPDD warranty has expired, upgrade to this version is not permitted',mbError,MB_OK);
//          WizardForm.Close;
           // Abort;
       result := false;
       end;       
     end

   end
   else
   begin
       if CompareText('{#ID_TBA_BUNDLE}','351') = 0 then
       begin
          MsgBox('This is an upgrade installer, no installation was found to upgrade',mbError,MB_OK);
       result := false;
       end;       
   end
end; 

procedure RunRemoveDB;  
var
  ResultCode: Integer;
begin

  Exec(ExpandConstant('{app}\upddutils.exe'), 'nodevice set hide_systemtray_icon 1', ExpandConstant('{app}'), SW_HIDE,    ewWaitUntilTerminated, ResultCode)
  Exec(ExpandConstant('{sys}\taskkill.exe'), '/f /im "UPDD Daemon.exe"', ExpandConstant('{sys}'), SW_HIDE,    ewWaitUntilTerminated, ResultCode)
  Exec(ExpandConstant('{sys}\taskkill.exe'), '/f /im "UPDD Console.exe"', ExpandConstant('{sys}'), SW_HIDE,    ewWaitUntilTerminated, ResultCode)
  Exec(ExpandConstant('{sys}\taskkill.exe'), '/f /im "UPDD Test.exe"', ExpandConstant('{sys}'), SW_HIDE,    ewWaitUntilTerminated, ResultCode)
  Exec(ExpandConstant('{sys}\taskkill.exe'), '/f /im "upddutils.exe"', ExpandConstant('{sys}'), SW_HIDE,    ewWaitUntilTerminated, ResultCode)
  Exec(ExpandConstant('{sys}\taskkill.exe'), '/f /im "UPDD-Gestures.exe"', ExpandConstant('{sys}'), SW_HIDE,    ewWaitUntilTerminated, ResultCode)
  Exec(ExpandConstant('{sys}\taskkill.exe'), '/f /im "UPDD Commander.exe"', ExpandConstant('{sys}'), SW_HIDE,    ewWaitUntilTerminated, ResultCode)
  Exec(ExpandConstant('{sys}\taskkill.exe'), '/f /im "UPDD-TUIO.exe"', ExpandConstant('{sys}'), SW_HIDE,    ewWaitUntilTerminated, ResultCode)
  Exec(ExpandConstant('{sys}\taskkill.exe'), '/f /im "UPDD Install.exe"', ExpandConstant('{sys}'), SW_HIDE,    ewWaitUntilTerminated, ResultCode)
  Exec(ExpandConstant('{sys}\taskkill.exe'), '/f /im "UPDD Annotate.exe"', ExpandConstant('{sys}'), SW_HIDE,    ewWaitUntilTerminated, ResultCode)
  Exec(ExpandConstant('{sys}\sc.exe'), 'delete updd', ExpandConstant('{sys}'), SW_HIDE,    ewWaitUntilTerminated, ResultCode)
  Exec(ExpandConstant('{sys}\sc.exe'), 'stop updd', ExpandConstant('{sys}'), SW_HIDE,    ewWaitUntilTerminated, ResultCode)
  Exec(ExpandConstant('{sys}\taskkill.exe'), '/f /im updd.exe', ExpandConstant('{sys}'), SW_HIDE,    ewWaitUntilTerminated, ResultCode)


  if  CmdLineParamExists('-R')  then
   begin
   end
   else 
   begin
     Exec(ExpandConstant('{app}\preinstall_temp\preinstall.exe'), '-removedb_unless_upgrade', ExpandConstant('{app}\preinstall_temp'), SW_HIDE,    ewWaitUntilTerminated, ResultCode)
   end;       
end;


procedure RunPreinstall;  
var
  ResultCode: Integer;
begin
 if Exec(ExpandConstant('{app}\preinstall.exe'), '-v5checksilent','',
         SW_HIDE,ewWaitUntilTerminated,ResultCode) then
 begin
   // Program Ran successfully ResultCode now contains exit code results

   // if Exit was 1 then Cancel Installation.
   if ResultCode = 1 then
   begin
      MsgBox('Please uninstall UPDD v5 before running setup',mbError,MB_OK);
      WizardForm.Close;
      Abort;
   end;       
 end


//  if not Exec(ExpandConstant('{app}\preinstall.exe'), '-unload', '', SW_HIDE,
//    ewWaitUntilTerminated, ResultCode)
//  then
//    MsgBox('Preinstall failed!' + #13#10 +
//      SysErrorMessage(ResultCode), mbError, MB_OK);
//
//  if not Exec(ExpandConstant('{app}\preinstall.exe'), '-killstuff', '', SW_HIDE,
//    ewWaitUntilTerminated, ResultCode)
//  then
//    MsgBox('Preinstall failed!' + #13#10 +
//      SysErrorMessage(ResultCode), mbError, MB_OK);
end;

#IFDEF UNICODE
  #DEFINE AW "W"
#ELSE
  #DEFINE AW "A"
#ENDIF
type
  INSTALLSTATE = Longint;
const
  INSTALLSTATE_INVALIDARG = -2;  { An invalid parameter was passed to the function. }
  INSTALLSTATE_UNKNOWN = -1;     { The product is neither advertised or installed. }
  INSTALLSTATE_ADVERTISED = 1;   { The product is advertised but not installed. }
  INSTALLSTATE_ABSENT = 2;       { The product is installed for a different user. }
  INSTALLSTATE_DEFAULT = 5;      { The product is installed for the current user. }


  { Visual C++ 2015 Redistributable 14.0.23026 }
  VC_2015_REDIST_X86_MIN = '{A2563E55-3BEC-3828-8D67-E5E8B9E8B675}';
  VC_2015_REDIST_X64_MIN = '{0D3E9E15-DE7A-300B-96F1-B4AF12B96488}';

  VC_2015_REDIST_X86_ADD = '{BE960C1C-7BAD-3DE6-8B1A-2616FE532845}';
  VC_2015_REDIST_X64_ADD = '{BC958BD2-5DAC-3862-BB1A-C1BE0790438D}';

  { Visual C++ 2015 Redistributable 14.0.24210 }
  VC_2015_REDIST_X86 = '{8FD71E98-EE44-3844-9DAD-9CB0BBBC603C}';
  VC_2015_REDIST_X64 = '{C0B2C673-ECAA-372D-94E5-E89440D087AD}';

function MsiQueryProductState(szProduct: string): INSTALLSTATE; 
  external 'MsiQueryProductState{#AW}@msi.dll stdcall';

function VCVersionInstalled(const ProductID: string): Boolean;
begin
  Result := MsiQueryProductState(ProductID) = INSTALLSTATE_DEFAULT;
end;

function VCRedistNeedsInstall: Boolean;
begin
  { here the Result must be True when you need to install your VCRedist }
  { or False when you don't need to, so now it's upon you how you build }
  { this statement, the following won't install your VC redist only when }
  { the Visual C++ 2010 Redist (x86) and Visual C++ 2010 SP1 Redist(x86) }
  { are installed for the current user }
//  Result := not (VCVersionInstalled(VC_2010_REDIST_X86) and 
//    VCVersionInstalled(VC_2010_SP1_REDIST_X86));
  
  Result := not (VCVersionInstalled(VC_2015_REDIST_X86));

end;



